parameters:
  - name: env
    type: string
  - name: condition
    default: succeeded()
  - name: agentPool
    type: string
  - name: projectName
    type: string
jobs:
  - deployment: "Deploy_${{ parameters.env }}"
    displayName: "Deploy ${{ parameters.env }}"
    timeoutInMinutes: 300
    variables:
      - name: folderName
        value: ${{ parameters.projectName }}/
    environment: aks-cd-${{ parameters.env }}
    pool: ${{ variables.agentPool }}
    #dependsOn: ${{ parameters.dependsOn }}
    #condition: ${{ parameters.condition }}
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:
            - download: none
            - checkout: self
              path: source
              clean: true
            - checkout: pipeline-commons
              path: commons
              clean: true
            - task: PowerShell@2
              displayName: "Prepare chart"
              inputs:
                targetType: "inline"
                script: |
                  $appVersion = "$(Build.BuildNumber)"
                  Write-Host "App version: $appVersion"
                  Write-Host "Chart version: $(major).$(minor).$(patch)"
                  Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
                  Install-Module powershell-yaml -Confirm:$false 

                  Write-Host "Prepare Chart.yaml"
                  $yaml = Get-Content -Path Chart.yaml | Out-String
                  Write-Host $yaml
                  $chart = ConvertFrom-Yaml $yaml
                  $chart['version'] = "$(major).$(minor).$(patch)"
                  $chart['appVersion'] = $appVersion
                  ConvertTo-Yaml $chart | Out-File -Path Chart.yaml

                  Write-Host "Updated Chart.yaml"
                  Get-Content Chart.yaml
                pwsh: true
                workingDirectory: "$(Pipeline.Workspace)/commons/aks/helm"
            - task: AzureCLI@2
              displayName: "Helm upgrade"
              inputs:
                azureSubscription: ${{ variables.azureSubscription }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  set -e
                  export HELM_EXPERIMENTAL_OCI=1
                  az aks get-credentials --name $(aksName) --resource-group $(aksResourceGroup) --overwrite-existing
                  kubectl config use-context $(aksName)

                  echo "Prepare working directories"
                  rm -rf $(Pipeline.Workspace)/prep

                  # templates application values tpl through helm
                  echo "Generate values.yaml"
                  cp -r $(Pipeline.Workspace)/commons/aks/helm $(Pipeline.Workspace)/prep
                  ls -la $(Pipeline.Workspace)/prep
                  rm -rf $(Pipeline.Workspace)/prep/templates/*.yaml
                  cp values.${{ parameters.env }}.tpl.yaml $(Pipeline.Workspace)/prep/templates/
                  helm template $(Pipeline.Workspace)/prep -f $(Pipeline.Workspace)/commons/common-values.yaml  --set env=${{ parameters.env }}  > $(Pipeline.Workspace)/helm/values.yaml
                  cat $(Pipeline.Workspace)/helm/values.yaml
                  rm -rf $(Pipeline.Workspace)/prep

                  echo "Helm lint"
                  cd $(Pipeline.Workspace)/helm/
                  ls -la
                  helm lint -f values.yaml -f ../commons/common-values.yaml -n ${{ parameters.env }} --set env=${{ parameters.env }} --set fullnameOverride=$(repoName)
                  helm template . -f values.yaml -f ../commons/common-values.yaml --set env=${{ parameters.env }} --set fullnameOverride=$(repoName) --debug

                  echo "Helm upgrade"
                  helm upgrade -f values.yaml -f ../commons/common-values.yaml -n ${{ parameters.env }} --install --create-namespace --wait $(repoName) --set env=${{ parameters.env }} --set fullnameOverride=$(repoName) .

                  echo "Clean-up"
                  rm -rf $(Pipeline.Workspace)/helm
                addSpnToEnvironment: true
                ${{ if eq(variables.helmRoot, '')}}:
                  workingDirectory: "$(Pipeline.Workspace)/source/helm"
                ${{ if ne(variables.helmRoot, '')}}:
                  workingDirectory: "$(Pipeline.Workspace)/source/${{ variables.helmRoot }}"
              enabled: false
