parameters:
  - name: env
    type: string
  - name: condition
    default: succeeded()
  - name: agentPool
    type: string
  - name: serviceName
    type: string

jobs:
  - deployment: "Deploy_${{ parameters.env }}"
    displayName: "Deploy ${{ parameters.env }}"
    timeoutInMinutes: 300
    environment: aks-cd-${{ parameters.env }}
    pool: ${{ parameters.agentPool }}
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:
            - download: none
            - checkout: self
              path: source
              clean: true
            - checkout: commons
              path: commons
              clean: true
            - task: PowerShell@2
              displayName: "Install Chart"
              inputs:
                targetType: "inline"
                script: |
                  $appVersion = "$(Build.BuildNumber)"
                  helm create ${{ parameters.serviceName }}
                  ls -la ${{ parameters.serviceName }}
                pwsh: true
                workingDirectory: "$(Pipeline.Workspace)/commons/common/aks/helm"
              enabled: false
            - task: PowerShell@2
              displayName: "Prepare chart and Validate"
              inputs:
                targetType: "inline"
                script: |
                  $appVersion = "$(Build.BuildNumber)"
                  $chartVersion = "$(major).$(minor).$(patch)"
                  Write-Host "App version: $appVersion"
                  Write-Host "Chart version: $chartVersion"
                  Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
                  Install-Module powershell-yaml -Confirm:$false 

                  Write-Host "Prepare Chart.yaml"
                  $yaml = Get-Content -Path Chart.yaml | Out-String
                  $chart = ConvertFrom-Yaml $yaml
                  $chart['name']=  "${{ parameters.serviceName }}"
                  $chart['description']=  "A Helm chart for Kubernetes ${{ parameters.serviceName }}: ${{ parameters.env }}"
                  $chart['version'] = "$chartVersion"
                  $chart['appVersion'] = $appVersion
                  ConvertTo-Yaml $chart | Out-File -Path Chart.yaml
                  Write-Host "==== Prepared Chart ====="
                  Get-Content Chart.yaml

                  Write-Host "Looping through template folder"
                  $yamlfiles=(Get-ChildItem -Path "templates" -Recurse -File).FullName.Replace("$(Pipeline.Workspace)/commons/common/aks/helm/templates/","")
                  foreach ($yamlfile in $yamlfiles)
                  {
                      (Get-Content -Path "templates/$yamlfile").Replace('TBD', '${{ parameters.serviceName }}') | Out-File "templates/$yamlfile"
                      Write-Host "==== Replacement: $yamlfile ===="
                      Get-Content "templates/$yamlfile"
                      Write-Host "==== ===="
                  }
                  Copy-Item -Path "$(Pipeline.Workspace)/source/helm/immigration/values-${{ parameters.env }}.yaml" -Destination "." -Recurse
                  ls -la
                  helm lint -f values-${{ parameters.env }}.yaml
                  helm template . -f values-${{ parameters.env }}.yaml --set fullnameOverride=${{ parameters.serviceName }}
                pwsh: true
                workingDirectory: "$(Pipeline.Workspace)/commons/common/aks/helm"
            - task: AzureCLI@2
              displayName: "Helm upgrade"
              inputs:
                azureSubscription: $(azureSubscription)
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  set -e
                  export HELM_EXPERIMENTAL_OCI=1
                  az aks get-credentials --name $(aksName) --resource-group $(aksResourceGroup) --overwrite-existing
                  kubectl config use-context $(aksName)

                  helm upgrade -f values-${{ parameters.env }}.yaml  -n $(namespace) --install --create-namespace --wait $(namespace) --set image.tag='20240315.6' --set fullnameOverride=${{ parameters.serviceName }} .
                 
                  #Copy-Item -Path "$(Pipeline.Workspace)/source/helm/immigration/values-${{ parameters.env }}.yaml" -Destination "." -Recurse
                  #ls -la
                  
                  #echo "Helm lint"
                  #cd $(Pipeline.Workspace)/helm/
                  #ls -la
                  #helm lint -f values.yaml -f ../commons/common-values.yaml -n ${{ parameters.env }} --set env=${{ parameters.env }} --set fullnameOverride=$(repoName)
                  #helm template . -f values.yaml -f ../commons/common-values.yaml --set env=${{ parameters.env }} --set fullnameOverride=$(repoName) --debug

                  #echo "Helm upgrade"
                  #helm upgrade -f values.yaml -f ../commons/common-values.yaml -n ${{ parameters.env }} --install --create-namespace --wait $(repoName) --set env=${{ parameters.env }} --set fullnameOverride=$(repoName) .
                addSpnToEnvironment: true
                workingDirectory: "$(Pipeline.Workspace)/commons/common/aks/helm"
              enabled: true
